package com.globant.webProject.rest;
import com.globant.webProject.dao.IUserDao;
import com.globant.webProject.model.User;
import com.globant.webProject.service.IUserService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController    // This means that this class is a Controller
public class UserController {
    //This annotation allows Spring to resolve and inject collaborating beans into your bean.
    // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    @Autowired
    IUserService userService;

    @GetMapping(path="/getUser/{id}")
    public @ResponseBody User getUser(@PathVariable(value="id") int id) {
        // This returns a JSON or XML with the users
        return userService.getUser(id);
    }

    @GetMapping(path="/getAllUsers")
    public @ResponseBody List<User> getAllUsers() {
        // This returns a JSON or XML with the users
        return userService.getAll();
    }

    @PostMapping(path="/addUser") // Map ONLY GET Requests
    //@GetMapping is a shortcut for @RequestMapping(method=GET). @RequestMapping maps all HTTP operations by default.
    public @ResponseBody String addNewUser (User user) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request
        userService.createUser(user);
        return "Saved user "  + user.getId();
    }

    @PutMapping(path="/modifyUser/{id}")
    public @ResponseBody String modifyUser (User user, @PathVariable(value="id") int id){
        userService.modifyUser(user,id);
        return "Modified user " + id;
    }

    @DeleteMapping(path="/deleteUser/{id}")
    public @ResponseBody String deleteUserById(@PathVariable(value="id") int id){
        userService.deleteUser(id);
        return "Deleted user " + id;
    }


}